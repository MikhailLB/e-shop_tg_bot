from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext

from app.states import *
from db.get_data import *
import keyboards.keyboards as kb
from db.update_data import add_review

make_review_router = Router()


@make_review_router.callback_query(F.data == "review_kb")
async def check_review(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –æ–ø—Ü–∏—é:", reply_markup=kb.reviews)


def get_review_keyboard(index, total):
    buttons = []
    if index > 0:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_review:{index - 1}"))
    buttons.append(InlineKeyboardButton(text=f"{index + 1}/{total}", callback_data="noop"))
    if index < total - 1:
        buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"next_review:{index + 1}"))

    navigation_row = [buttons]
    back_button = [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]

    return InlineKeyboardMarkup(inline_keyboard=navigation_row + [back_button])


@make_review_router.callback_query(F.data == "check_reviews")
async def check_review(callback: CallbackQuery, state: FSMContext):
    reviews = get_reviews()
    if not reviews:
        await callback.message.answer("–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    await state.update_data(reviews=reviews, review_index=0)
    await show_review(callback, state, 0)


async def show_review(callback: CallbackQuery, state: FSMContext, index: int):
    data = await state.get_data()
    reviews = data.get("reviews", [])

    if 0 <= index < len(reviews):
        review = reviews[index]
        text = (f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {review[0]}\n"
                f"–û—Ü–µ–Ω–∫–∞: {'‚≠ê' * review[1]}\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {review[2]}\n"
                f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {review[3]}")
        keyboard = get_review_keyboard(index, len(reviews))
        await callback.message.edit_text(text, reply_markup=keyboard)
        await state.update_data(review_index=index)


@make_review_router.callback_query(F.data.startswith("next_review"))
async def next_review(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.split(":")[1])
    await show_review(callback, state, index)


@make_review_router.callback_query(F.data.startswith("prev_review"))
async def prev_review(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.split(":")[1])
    await show_review(callback, state, index)


@make_review_router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é", reply_markup=kb.reviews)




@make_review_router.callback_query(F.data == "post_review")
async def ask_for_rating(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PostReview.stars)
    await callback.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5:"
    )
    await callback.answer()


@make_review_router.message(PostReview.stars)
async def process_rating(message: Message, state: FSMContext):
    if message.text in ['1', '2', '3', '4', '5']:
        await state.update_data(stars=message.text)
        await state.set_state(PostReview.comment)
        await message.answer(
            "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ—á–µ—Ä–∫ (-)"
        )
    else:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5"
        )


@make_review_router.message(PostReview.comment)
async def process_comment(message: Message, state: FSMContext):
    if len(message.text) <= 200 or message.text == "-":
        await state.update_data(comment=message.text)
        data = await state.get_data()

        user_id = message.from_user.id
        rating = data['stars']
        comment = data['comment']
        user_name = message.from_user.username

        try:

            add_review(user_id, rating, comment, user_name)
            await message.answer(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", reply_markup=kb.reviews
            )
        except Exception as e:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤!", reply_markup=kb.reviews)

        await state.clear()
    else:
        await message.answer(
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤!"
        )


