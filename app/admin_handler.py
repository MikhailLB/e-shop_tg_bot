from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.admin_states import GetId
from app.states import AddDeliveryLink, DeleteProduct
from keyboards.admin_keyboards import *
import openpyxl
from aiogram import types
from aiogram.filters import Command
from db.update_data import insert_products, add_order_status, add_order_delivery_link, delete_product_by_name, \
    add_admin_to_db, delete_admin_from_bd
from db.get_data import *


admin_router = Router()

def admins_users():
    ADMINS = fetch_admins()
    return ADMINS

def admins_users_name():
    ADMINS = admins_name()
    return ADMINS


def get_order_statuses_keyboard(order_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", callback_data=f"order_in_process:{order_id}")],
        [InlineKeyboardButton(text="–í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è", callback_data=f"order_accepted:{order_id}")],
        [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω", callback_data=f"order_sent:{order_id}")],
        [InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω", callback_data=f"order_complete:{order_id}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"now_orders_kb")]
    ])

def create_order_navigation_kb(order_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", callback_data=f"change_order_status:{order_id}"),
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", callback_data=f"change_tracking_link:{order_id}")
        ],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="get_back")]
    ])
    return keyboard

@admin_router.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in admins_users().keys():
        await state.clear()
        await message.answer("üîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=admin_keyboard)
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@admin_router.callback_query(F.data == "product_control")
async def product_control(callback: CallbackQuery):
    user_id = callback.from_user.id

    if user_id in admins_users().keys():
        await callback.message.edit_text("üîπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", reply_markup=goods)
    else:
        await callback.message.edit_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@admin_router.callback_query(F.data == "get_back")
async def back_to_admin_menu(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if user_id in admins_users().keys():
        await state.clear()
        await callback.message.edit_text("üîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=admin_keyboard)
    else:
        await callback.message.edit_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@admin_router.callback_query(F.data == "delete_product")
async def delete_product(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id in admins_users().keys():
        await callback.message.edit_text("–£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä: ", reply_markup=get_admin_back_to_mainmenu)
        await state.set_state(DeleteProduct.name)
    else:
        await callback.message.edit_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@admin_router.message(DeleteProduct.name)
async def find_del_pr(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in admins_users().keys():
        await state.update_data(name=message.text)
        data = await state.get_data()
        name = data.get('name')
        try:
            delete_product_by_name(name)
            await message.answer(f"–¢–æ–≤–∞—Ä {name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=goods)
            await state.clear()
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞! –¢–æ–≤–∞—Ä {name} –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=goods)
    else:
        await message.edit_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@admin_router.callback_query(F.data == "add_product")
async def start_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id in admins_users().keys():
        await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏: name, url, size, color, description, photo_url, price, category", reply_markup=get_admin_back_to_mainmenu)
    else:
        await callback.message.edit_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@admin_router.message(lambda message: message.document and message.document.mime_type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
async def handle_excel(message: types.Message):
    document = message.document
    file_path = f"data.xlsx"

    file = await message.bot.get_file(document.file_id)
    await message.bot.download_file(file.file_path, file_path)

    try:
        wb = openpyxl.load_workbook(file_path)
        sheet = wb.active

        headers = [cell.value for cell in sheet[1] if cell.value]

        required_columns = ["name", "url", "size", "color", "description", "photo_url", "price", "category"]
        if not all(col in headers for col in required_columns):
            await message.answer("–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏!", reply_markup=get_admin_back_to_mainmenu)
            return

        data_list = []
        for row in sheet.iter_rows(min_row=2, values_only=True):
            data_list.append(list(row))

        insert_products(data_list)
        await message.answer(f"–¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ë–î", reply_markup=admin_keyboard)

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", reply_markup=get_admin_back_to_mainmenu)


@admin_router.callback_query(F.data == "order_control")
async def products_controller(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id in admins_users().keys():
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=orders_keyboard)
    else:
        await callback.message.edit_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


@admin_router.callback_query(F.data == "now_orders_kb")
async def show_orders_admin(callback: CallbackQuery):
    user_id = callback.from_user.id

    if user_id not in admins_users().keys():
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    orders = get_orders_for_admin()
    if not orders:
        await callback.message.edit_text("–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=get_admin_back_to_mainmenu)
        return
    await show_order(callback, orders, index=0)

async def show_order(callback: CallbackQuery, orders, index: int):
    order = orders[index]
    order_id, name, price, delivery_method, size, color, address, status, tracking_link = order

    text = (
        f"üì¶ **–ó–∞–∫–∞–∑ #{order_id}**\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"–¶–µ–Ω–∞: {price}‚ÇΩ\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_method}\n"
        f"–†–∞–∑–º–µ—Ä: {size}\n"
        f"–¶–≤–µ—Ç: {color}\n"
        f"–ê–¥—Ä–µ—Å: {address}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {tracking_link or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
    )

    navigation_kb = InlineKeyboardBuilder()
    if index > 0:
        navigation_kb.button(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"prev_order_admin:{index-1}")
    if index < len(orders) - 1:
        navigation_kb.button(text="–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", callback_data=f"next_order_admin:{index+1}")

    keyboard = create_order_navigation_kb(order_id)
    keyboard.inline_keyboard += navigation_kb.as_markup().inline_keyboard

    await callback.message.edit_text(text, reply_markup=keyboard)

@admin_router.callback_query(F.data.startswith("next_order_admin"))
async def next_order_admin(callback: CallbackQuery):
    index = int(callback.data.split(":")[1])
    orders = get_orders_for_admin()
    await show_order(callback, orders, index)

@admin_router.callback_query(F.data.startswith("prev_order_admin"))
async def prev_order_admin(callback: CallbackQuery):
    index = int(callback.data.split(":")[1])
    orders = get_orders_for_admin()
    await show_order(callback, orders, index)

@admin_router.callback_query(F.data == "fulfill_orders")
async def show_fulfill_orders_admin(callback: CallbackQuery):
    user_id = callback.from_user.id

    if user_id not in admins_users():
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    orders = get_all_orders_for_admin()
    if not orders:
        await callback.message.edit_text("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤!", reply_markup=get_admin_back_to_mainmenu)
        return

    await show_order(callback, orders, index=0)

@admin_router.callback_query(F.data.startswith("change_order_status"))
async def change_order_status(callback: CallbackQuery):
    order_id = callback.data.split(":")[1]
    await callback.message.edit_text(
        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:",
        reply_markup=get_order_statuses_keyboard(order_id)
    )

@admin_router.callback_query(F.data.startswith("order_in_process"))
async def change_order_status_in_process(callback: CallbackQuery):
    order_id = callback.data.split(":")[1]
    add_order_status(order_id, "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    await callback.message.edit_text(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'", reply_markup=orders_keyboard)

@admin_router.callback_query(F.data.startswith("order_accepted"))
async def change_order_status_order_accepted(callback: CallbackQuery):
    order_id = callback.data.split(":")[1]
    add_order_status(order_id, "–í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è")
    await callback.message.edit_text(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è!'", reply_markup=orders_keyboard)

@admin_router.callback_query(F.data.startswith("order_sent"))
async def change_order_status_order_sent(callback: CallbackQuery):
    order_id = callback.data.split(":")[1]
    add_order_status(order_id, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    await callback.message.edit_text(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω'", reply_markup=orders_keyboard)

@admin_router.callback_query(F.data.startswith("order_complete"))
async def change_order_status_order_complete(callback: CallbackQuery):
    order_id = callback.data.split(":")[1]
    add_order_status(order_id, "–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    await callback.message.edit_text(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω'", reply_markup=orders_keyboard)

@admin_router.callback_query(F.data.startswith("change_tracking_link"))
async def change_tracking_link(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":")[1]
    await callback.message.edit_text(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: ")
    await state.set_state(AddDeliveryLink.link)
    await state.update_data(order_id=order_id)

@admin_router.message(AddDeliveryLink.link)
async def change_tracking_link1(message: Message, state: FSMContext):
    await state.update_data(link=message.text)
    data = await state.get_data()
    link = data.get('link')
    order_id = data.get('order_id')
    add_order_delivery_link(order_id, link)
    await message.answer(f"–°—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {link}", reply_markup=orders_keyboard)
    await state.clear()


@admin_router.callback_query(F.data.startswith("admin_control"))
async def admin_control(callback: CallbackQuery):
    user_id = callback.from_user.id
    if admins_users()[user_id] == "super_admin":
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=admin_control_kb)
    else:
        await callback.message.edit_text(f"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", reply_markup=get_admin_back_to_mainmenu)


@admin_router.callback_query(F.data.startswith("add_admin"))
async def add_admin(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if admins_users()[user_id] == "super_admin":
        await callback.message.edit_text(f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ id, –ø—Ä–∏–º–µ—Ä: 1272027591. –ê–π–¥–∏ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –±–æ—Ç–µ @getmyid_bot",  reply_markup=get_admin_back_to_mainmenu)
        await state.set_state(GetId.id)
    else:
        await callback.message.edit_text(f"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", reply_markup=get_admin_back_to_mainmenu)

@admin_router.message(GetId.id)
async def add_admin2(message: Message, state: FSMContext):
    await state.update_data(id=message.text)
    user_id = message.from_user.id
    if admins_users()[user_id] == "super_admin":
        await message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",  reply_markup=get_admin_back_to_mainmenu)
        await state.set_state(GetId.name)
    else:
        await message.answer(f"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", reply_markup=get_admin_back_to_mainmenu)

@admin_router.message(GetId.name)
async def add_admin1(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if admins_users()[user_id] == "super_admin":
        await state.update_data(name=message.text)
        data = await state.get_data()
        id = data.get('id')
        name = data.get('name')
        try:
            add_admin_to_db(id, name)
            await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_admin_back_to_mainmenu)
            await state.clear()

        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", reply_markup=get_admin_back_to_mainmenu)
            await state.clear()
    else:
        await message.edit_text(f"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", reply_markup=get_admin_back_to_mainmenu)


def get_admins_keyboard():
    admins = admins_users_name()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{admin_id}:{admin_name}", callback_data=f"confirm_delete:{admin_id}")]
            for admin_id,admin_name in admins.items()
        ]
    )
    back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="get_back")

    keyboard.inline_keyboard += [[back_button]]
    return keyboard


@admin_router.callback_query(F.data.startswith("delete_admin"))
async def delete_admin(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if fetch_admins().get(user_id) == "super_admin":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
            reply_markup=get_admins_keyboard()
        )
    else:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", reply_markup=get_admin_back_to_mainmenu
        )


@admin_router.callback_query(F.data.startswith("confirm_delete:"))
async def confirm_delete_admin(callback: CallbackQuery):
    admin_id = int(callback.data.split(":")[1])
    delete_admin_from_bd(admin_id)
    await callback.message.edit_text(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id} —É–¥–∞–ª—ë–Ω.", reply_markup=get_admin_back_to_mainmenu)


# @admin_router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')
# async def add_good(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     if user_id in ADMINS:
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n–û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º!\n–ß—Ç–æ–±—ã –ø–æ –Ω–µ–º—É –±—ã–ª –≤–æ–∑–º–æ–∂–µ–Ω –ø–æ–∏—Å–∫, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ—á—å –≤ —Ç–æ—á—å –∫–∞–∫ –Ω–∞ poizon")
#         await state.set_state(MakeGood.name)
#         await state.update_data(name=message.text)
#         await state.set_state(MakeGood.url)
#     else:
#         await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
#
# @admin_router.message(MakeGood.url)
# async def add_good1(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     if user_id in ADMINS:
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ url —Ç–æ–≤–∞—Ä–∞:")
#         await state.update_data(url=message.text)
#         await state.set_state(MakeGood.size)
#     else:
#         await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
#
# @admin_router.message(MakeGood.size)
# async def add_good2(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     if user_id in ADMINS:
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ")
#         try:
#             sizes = message.text.split(" ")
#             await state.update_data(size=sizes)
#             await state.set_state(MakeGood.color)
#         except:
#             await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
#     else:
#         await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
#
# @admin_router.message(MakeGood.color)
# async def add_good3(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     if user_id in ADMINS:
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ")
#         try:
#             colors = message.text.split(" ")
#             await state.update_data(color=colors)
#             await state.set_state(MakeGood.description)
#         except:
#             await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
#     else:
#         await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
#
# @admin_router.message(MakeGood.description)
# async def add_good4(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     if user_id in ADMINS:
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ")
#         await state.update_data(description=message.text)
#         await state.set_state(MakeGood.photo)
#     else:
#         await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
#
#
# @admin_router.message(MakeGood.photo)
# async def add_good5(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     if user_id in ADMINS:
#         await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞: ")
#         try:
#             last_uploaded_photo_id = message.photo[-1].file_id
#             print(last_uploaded_photo_id)
#             await state.update_data(photo=last_uploaded_photo_id)
#             await state.set_state(MakeGood.price)
#         except:
#             await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
#     else:
#         await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
#
# @admin_router.message(MakeGood.price)
# async def add_good6(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     if user_id in ADMINS:
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –±–µ–∑ –≤–∞–ª—é—Ç—ã): ")
#         await state.update_data(price=message.text)
#         await state.set_state(MakeGood.category)
#     else:
#         await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
#
#
# @admin_router.message(MakeGood.category)
# async def add_good8(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     if user_id in ADMINS:
#         await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞",reply_markup=kb.find_product_keyboard)
#     else:
#         await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
#
# @admin_router.callback_query(F.data.startswith("category_"))
# async def select_category(callback: CallbackQuery, state: FSMContext):
#     category = callback.data  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
#     await state.update_data(category=category)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
#     await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")
#
#     user_data = await state.get_data()
#
#     name = user_data.get('name')
#     url = user_data.get('url')
#     size = user_data.get('size')
#     color = user_data.get('color')
#     description = user_data.get('description')
#     photo = user_data.get('photo')
#     price = user_data.get('price')
#     category = user_data.get('category')
#
#     print(name, url, size, color, description, photo, price, category)
#     await state.clear()


