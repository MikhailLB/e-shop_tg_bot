from aiogram import Router, F
from aiogram.types import Message
from keyboards.admin_keyboards import *
import openpyxl
from aiogram import types
from aiogram.filters import Command
from db.update_data import insert_products
from db.get_data import *
ADMINS = {1272027592}
admin_router = Router()

@admin_router.message(Command("admin"))
async def admin_panel(message: Message):
    user_id = message.from_user.id

    if user_id in ADMINS:
        await message.answer("üîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=admin_keyboard)
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@admin_router.message(F.text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")
async def admin_panel(message: Message):
    user_id = message.from_user.id

    if user_id in ADMINS:
        await message.answer("üîπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", reply_markup=goods)
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@admin_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id in ADMINS:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏: name, url, size, color, description, photo_url, price, category")
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@admin_router.message(lambda message: message.document and message.document.mime_type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
async def handle_excel(message: types.Message):
    document = message.document
    file_path = f"data.xlsx"

    file = await message.bot.get_file(document.file_id)
    await message.bot.download_file(file.file_path, file_path)

    try:
        wb = openpyxl.load_workbook(file_path)
        sheet = wb.active

        headers = [cell.value for cell in sheet[1] if cell.value]

        required_columns = ["name", "url", "size", "color", "description", "photo_url", "price", "category"]
        if not all(col in headers for col in required_columns):
            await message.answer("–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏!")
            return

        data_list = []
        for row in sheet.iter_rows(min_row=2, values_only=True):
            data_list.append(list(row))

        goods = check_existing_products(data_list)
        if goods:
            await message.answer(f"–¢–æ–≤–∞—Ä—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç!\n–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã: ")
            for i in goods:
                await message.answer(f"{i[1]}\n{i[2]}")

        else:
            insert_products(data_list)
            await message.answer(f"–¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ë–î")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")



# @admin_router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')
# async def add_good(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     if user_id in ADMINS:
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n–û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º!\n–ß—Ç–æ–±—ã –ø–æ –Ω–µ–º—É –±—ã–ª –≤–æ–∑–º–æ–∂–µ–Ω –ø–æ–∏—Å–∫, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ—á—å –≤ —Ç–æ—á—å –∫–∞–∫ –Ω–∞ poizon")
#         await state.set_state(MakeGood.name)
#         await state.update_data(name=message.text)
#         await state.set_state(MakeGood.url)
#     else:
#         await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
#
# @admin_router.message(MakeGood.url)
# async def add_good1(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     if user_id in ADMINS:
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ url —Ç–æ–≤–∞—Ä–∞:")
#         await state.update_data(url=message.text)
#         await state.set_state(MakeGood.size)
#     else:
#         await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
#
# @admin_router.message(MakeGood.size)
# async def add_good2(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     if user_id in ADMINS:
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ")
#         try:
#             sizes = message.text.split(" ")
#             await state.update_data(size=sizes)
#             await state.set_state(MakeGood.color)
#         except:
#             await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
#     else:
#         await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
#
# @admin_router.message(MakeGood.color)
# async def add_good3(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     if user_id in ADMINS:
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ")
#         try:
#             colors = message.text.split(" ")
#             await state.update_data(color=colors)
#             await state.set_state(MakeGood.description)
#         except:
#             await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
#     else:
#         await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
#
# @admin_router.message(MakeGood.description)
# async def add_good4(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     if user_id in ADMINS:
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ")
#         await state.update_data(description=message.text)
#         await state.set_state(MakeGood.photo)
#     else:
#         await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
#
#
# @admin_router.message(MakeGood.photo)
# async def add_good5(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     if user_id in ADMINS:
#         await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞: ")
#         try:
#             last_uploaded_photo_id = message.photo[-1].file_id
#             print(last_uploaded_photo_id)
#             await state.update_data(photo=last_uploaded_photo_id)
#             await state.set_state(MakeGood.price)
#         except:
#             await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
#     else:
#         await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
#
# @admin_router.message(MakeGood.price)
# async def add_good6(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     if user_id in ADMINS:
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –±–µ–∑ –≤–∞–ª—é—Ç—ã): ")
#         await state.update_data(price=message.text)
#         await state.set_state(MakeGood.category)
#     else:
#         await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
#
#
# @admin_router.message(MakeGood.category)
# async def add_good8(message: Message, state: FSMContext):
#     user_id = message.from_user.id
#     if user_id in ADMINS:
#         await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞",reply_markup=kb.find_product_keyboard)
#     else:
#         await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
#
# @admin_router.callback_query(F.data.startswith("category_"))
# async def select_category(callback: CallbackQuery, state: FSMContext):
#     category = callback.data  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
#     await state.update_data(category=category)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
#     await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")
#
#     user_data = await state.get_data()
#
#     name = user_data.get('name')
#     url = user_data.get('url')
#     size = user_data.get('size')
#     color = user_data.get('color')
#     description = user_data.get('description')
#     photo = user_data.get('photo')
#     price = user_data.get('price')
#     category = user_data.get('category')
#
#     print(name, url, size, color, description, photo, price, category)
#     await state.clear()


