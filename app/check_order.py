from aiogram import F, Router
from db.get_data import *
import keyboards.keyboards as kb
from keyboards.keyboards import back_menu

check_order_router = Router()

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import F
from aiogram.fsm.context import FSMContext

def get_orders_keyboard(index: int, total: int) -> InlineKeyboardMarkup:
    buttons = []
    if total > 1:
        buttons.append([
            InlineKeyboardButton(text="‚è™", callback_data=f"prev_order_c|{index}"),
            InlineKeyboardButton(text=f"{index + 1}/{total}", callback_data="ignore"),
            InlineKeyboardButton(text="‚è©", callback_data=f"next_order_c|{index + 1}")
        ])

    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@check_order_router.callback_query(F.data.startswith("info_about_order"))
async def make_order_check(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb.check_order)

@check_order_router.callback_query(F.data.startswith("check_order"))
async def make_order_check_cart(callback: CallbackQuery, state: FSMContext):
    items = get_orders(callback.from_user.id)

    if items:
        index = 0
        total = len(items)

        name, price, delivery_method, size, color, address, order_status, tracking_link = items[index]

        text = (
            f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{index + 1}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"–¶–µ–Ω–∞: {price}‚ÇΩ\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_method}\n"
            f"–†–∞–∑–º–µ—Ä: {size}\n"
            f"–¶–≤–µ—Ç: {color}\n"
            f"–ê–¥—Ä–µ—Å: {address}\n"
            f"–°—Ç–∞—Ç—É—Å: {order_status}\n"
            f"–¢—Ä–µ–∫–∏–Ω–≥: {tracking_link if tracking_link else '–ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–∫–∞–∑, –ø–æ—è–≤–∏—Ç—Å—è —Ç—Ä–µ–∫–∏–Ω–≥-—Å—Å—ã–ª–∫–∞'}"
        )

        keyboard = get_orders_keyboard(index, total)
        await callback.message.edit_text(text, reply_markup=keyboard)
    else:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤!", show_alert=True, reply_markup=back_menu)


@check_order_router.callback_query(F.data.startswith("prev_order_c"))
async def prev_order_c(callback: CallbackQuery, state: FSMContext):
    items = get_orders(callback.from_user.id)
    total = len(items)

    if total <= 1:
        await callback.answer("–î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–∞–∫–∞–∑.", show_alert=True)
        return

    index = int(callback.data.split("|")[1]) - 1
    if index < 0:
        index = total - 1

    await update_order_message(callback, items, index)

@check_order_router.callback_query(F.data.startswith("next_order_c"))
async def next_order_c(callback: CallbackQuery, state: FSMContext):
    items = get_orders(callback.from_user.id)
    total = len(items)

    if total <= 1:
        await callback.answer("–î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–∞–∫–∞–∑.", show_alert=True)
        return

    index = int(callback.data.split("|")[1])
    if index >= total:
        index = 0

    await update_order_message(callback, items, index)


async def update_order_message(callback: CallbackQuery, items, index: int):
    name, price, delivery_method, size, color, address, order_status, tracking_link = items[index]

    text = (
        f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{index + 1}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"–¶–µ–Ω–∞: {price}‚ÇΩ\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_method}\n"
        f"–†–∞–∑–º–µ—Ä: {size}\n"
        f"–¶–≤–µ—Ç: {color}\n"
        f"–ê–¥—Ä–µ—Å: {address}\n"
        f"–°—Ç–∞—Ç—É—Å: {order_status}\n"
        f"–¢—Ä–µ–∫–∏–Ω–≥: {tracking_link if tracking_link else '–ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–∫–∞–∑, –ø–æ—è–≤–∏—Ç—Å—è —Ç—Ä–µ–∫–∏–Ω–≥-—Å—Å—ã–ª–∫–∞'}"
    )

    keyboard = get_orders_keyboard(index, len(items))
    await callback.message.edit_text(text, reply_markup=keyboard)

@check_order_router.callback_query(F.data.startswith("check_all_orders"))
async def make_order_check_cart(callback: CallbackQuery, state: FSMContext):
    items = get_all_orders(callback.from_user.id)

    if items:
        index = 0
        total = len(items)

        name, price, delivery_method, size, color, address, order_status, tracking_link = items[index]

        text = (
            f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{index + 1}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"–¶–µ–Ω–∞: {price}‚ÇΩ\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_method}\n"
            f"–†–∞–∑–º–µ—Ä: {size}\n"
            f"–¶–≤–µ—Ç: {color}\n"
            f"–ê–¥—Ä–µ—Å: {address}\n"
            f"–°—Ç–∞—Ç—É—Å: {order_status}\n"
            f"–¢—Ä–µ–∫–∏–Ω–≥: {tracking_link if tracking_link else '–ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–∫–∞–∑, –ø–æ—è–≤–∏—Ç—Å—è —Ç—Ä–µ–∫–∏–Ω–≥-—Å—Å—ã–ª–∫–∞'}"
        )

        keyboard = get_orders_keyboard(index, total)
        await callback.message.edit_text(text, reply_markup=keyboard)
    else:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤!", show_alert=True, reply_markup=back_menu)


async def update_orders_message(callback: CallbackQuery, items, index: int):
    name, price, delivery_method, size, color, address, order_status, tracking_link = items[index]

    text = (
        f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{index + 1}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"–¶–µ–Ω–∞: {price}‚ÇΩ\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_method}\n"
        f"–†–∞–∑–º–µ—Ä: {size}\n"
        f"–¶–≤–µ—Ç: {color}\n"
        f"–ê–¥—Ä–µ—Å: {address}\n"
        f"–°—Ç–∞—Ç—É—Å: {order_status}\n"
        f"–¢—Ä–µ–∫–∏–Ω–≥: {tracking_link if tracking_link else '–ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–∫–∞–∑, –ø–æ—è–≤–∏—Ç—Å—è —Ç—Ä–µ–∫–∏–Ω–≥-—Å—Å—ã–ª–∫–∞'}"
    )

    keyboard = get_orders_keyboard(index, len(items))
    await callback.message.edit_text(text, reply_markup=keyboard)